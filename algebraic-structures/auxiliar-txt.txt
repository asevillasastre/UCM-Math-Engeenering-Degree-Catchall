#sabemos que el orden del grupo de unidades de Z_n es el número de coprimos con n menores que él, osea la función phi de Euler
print("Z_144 tiene orden " + str(euler_phi(114)))

#[a]_n pertenecerá a las unidades de Z_m si y sólo si n y m son coprimos
if gcd(114,a)==1:
    print("[a]_n pertenece")
else:
    print("[a]_n no pertenece")
if gcd(114,c)==1:
    print("[c]_n pertenece")
else:
    print("[c]_n no pertenece")

#recurrimos a la identidad de Bézout para obtener el inverso
print(xgcd(114,c))[2]

print(omult(c,114))

def omultenZ_m(n,m):
    A=Integers(m)
    n=A(n)
    o=euler_phi(m)
    for i in range(1,m+1):
        if n^i==1:
             return i

print(omultenZ_m(c,114))

#U(Z_p) = Z_p-1
def gensdeUdeZp(p):
    lst=[]
    k=1
    while len(lst)<5 and k<p-1:
        if gcd(k,p-1)==1:
            lst.append(k)
        k= k+1
    return lst